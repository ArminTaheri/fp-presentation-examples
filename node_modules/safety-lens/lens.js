'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traverseOf = exports.sumOf = exports.set = exports.over = exports.lookup = exports.lens = exports.identity = exports.id = exports.to = exports.getter = exports.get = exports.foldrOf = exports.foldMapOf = exports.filtering = exports.compose = exports.Identity = exports.Endo = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Maybe = require('./lib/Maybe');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Algebraic implementations
 */

/* Types */

/*
 * Supporting interfaces
 */

// `Pure_` is "pure" for functors - will not be invoked unless further
// constrained to `Pure`

var Const = function () {
  function Const(value) {
    _classCallCheck(this, Const);

    this.value = value;
  }

  _createClass(Const, [{
    key: 'map',
    value: function map(f) {
      return new Const(this.value);
    }
  }, {
    key: 'contramap',
    value: function contramap(f) {
      return new Const(this.value);
    }
  }]);

  return Const;
}();

var ApplyConst = function (_Const) {
  _inherits(ApplyConst, _Const);

  function ApplyConst() {
    _classCallCheck(this, ApplyConst);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ApplyConst).apply(this, arguments));
  }

  _createClass(ApplyConst, [{
    key: 'ap',
    value: function ap(x) {
      return new ApplyConst(this.value.concat(x.value));
    }
  }, {
    key: 'map',
    value: function map(f) {
      return new ApplyConst(this.value);
    }
  }, {
    key: 'contramap',
    value: function contramap(f) {
      return new ApplyConst(this.value);
    }
  }]);

  return ApplyConst;
}(Const);

var Identity = function () {
  function Identity(value) {
    _classCallCheck(this, Identity);

    this.value = value;
  }

  _createClass(Identity, [{
    key: 'map',
    value: function map(f) {
      return new Identity(f(this.value));
    }
  }, {
    key: 'ap',
    value: function ap(x) {
      var f = this.value;
      return new Identity(f(x.value));
    }
  }, {
    key: 'sequence',
    value: function sequence(pure) {
      return pure(this);
    }
  }]);

  return Identity;
}();

function constant(val) {
  return new Const(val);
}
function applyConstant(val) {
  return new ApplyConst(val);
}
function identity(val) {
  return new Identity(val);
}

// Ordinary function composition - also works to compose lenses
function compose() {
  for (var _len = arguments.length, functions = Array(_len), _key = 0; _key < _len; _key++) {
    functions[_key] = arguments[_key];
  }

  return functions.reduceRight(function (accum, fn) {
    return function (x) {
      return fn(accum(x));
    };
  });
}

/* lenses */

/*
 * Creates a lens from a getter and setter function.
 */
function lens(getter, setter) {
  return function (f) {
    return function (pure, obj) {
      return f(pure, getter(obj)).map(function (val) {
        return setter(obj, val);
      });
    };
  };
}

/* getting */

/*
 * Turns an ordinary function into a getter
 */
function getter(getter) {
  return function (f) {
    return function (pure, obj) {
      return f(pure, getter(obj)).map(function (_) {
        return obj;
      });
    };
  };
}

/*
 * Given a getter (which is a specialized lens), and data structure, gets
 * a value out of the data structure.
 */
function get(getter, obj) {
  return getter(function (_, val) {
    return new Const(val);
  })(constant, obj).value;
}

/* setting */

function set(setter, val, obj) {
  return setter(function (_, __) {
    return new Identity(val);
  })(identity, obj).value;
}

function over(setter, f, obj) {
  return setter(function (_, a) {
    return new Identity(f(a));
  })(identity, obj).value;
}

/* traversing */

function traverseOf(pure, l, f, obj) {
  return l(f)(pure, obj);
}

function filtering(predicate) {
  return function (f) {
    return function (pure, obj) {
      return predicate(obj) ? f(pure, obj).map(id) : pure(obj);
    };
  };
  // TODO: `.map(id)` suppresses a (hopefully unimportant) type error
}

/* folding */

// `First` is one possible Monoid implementation for `Maybe`

var First = function () {
  function First(value) {
    _classCallCheck(this, First);

    this.value = value;
  }

  _createClass(First, [{
    key: 'concat',
    value: function concat(other) {
      return this.value instanceof _Maybe.Just ? this : other;
    }
  }, {
    key: 'empty',
    value: function empty() {
      return new First(_Maybe.nothing);
    }
  }]);

  return First;
}();

function first(val) {
  return new First(val);
}

function foldMapOf(l, f, mempty, obj) {
  var wrapConst = function wrapConst(pure, val) {
    return applyConstant(f(val));
  };
  return l(wrapConst)(function (_) {
    return applyConstant(mempty);
  }, obj).value;
}

// `Endo` turns a function into a Monoid

var Endo = function () {
  function Endo(f) {
    _classCallCheck(this, Endo);

    this.f = f;
  }

  _createClass(Endo, [{
    key: 'concat',
    value: function concat(other) {
      return new Endo(compose(this.f, other.f));
    }
  }, {
    key: 'empty',
    value: function empty() {
      return new Endo(id);
    }
  }]);

  return Endo;
}();

function endo(f) {
  return new Endo(f);
}

function foldrOf(l, f, init, obj) {
  var curried = function curried(val) {
    return function (accum) {
      return f(val, accum);
    };
  };
  return foldMapOf(l, compose(endo, curried), new Endo(id), obj).f(init);
}

function sumOf(l, obj) {
  return foldrOf(l, function (x, y) {
    return x + y;
  }, 0, obj);
}

/*
 * `lookup` is like `get`, except that the result might be `undefined`.
 *
 * `get` cannot be used with `Traversal` or `Fold` lenses.
 * In these cases, use `lookup` instead.
 *
 */
function lookup(l, obj) {
  function toMonoid(val) {
    return first((0, _Maybe.just)(val));
  }
  return foldMapOf(l, toMonoid, first(_Maybe.nothing), obj).value.value;
}

function id(val) {
  return val;
}

exports.Endo = Endo;
exports.Identity = Identity;
exports.compose = compose;
exports.filtering = filtering;
exports.foldMapOf = foldMapOf;
exports.foldrOf = foldrOf;
exports.get = get;
exports.getter = getter;
exports.to = getter;
exports.id = id;
exports.identity = identity;
exports.lens = lens;
exports.lookup = lookup;
exports.over = over;
exports.set = set;
exports.sumOf = sumOf;
exports.traverseOf = traverseOf;

//# sourceMappingURL=lens.js.map